// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/predicate"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/productitem"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/subcategory"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/user"
	"github.com/google/uuid"
)

// ProductItemUpdate is the builder for updating ProductItem entities.
type ProductItemUpdate struct {
	config
	hooks    []Hook
	mutation *ProductItemMutation
}

// Where appends a list predicates to the ProductItemUpdate builder.
func (piu *ProductItemUpdate) Where(ps ...predicate.ProductItem) *ProductItemUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetName sets the "name" field.
func (piu *ProductItemUpdate) SetName(s string) *ProductItemUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetAmount sets the "amount" field.
func (piu *ProductItemUpdate) SetAmount(s string) *ProductItemUpdate {
	piu.mutation.SetAmount(s)
	return piu
}

// SetUnitType sets the "unit_type" field.
func (piu *ProductItemUpdate) SetUnitType(s string) *ProductItemUpdate {
	piu.mutation.SetUnitType(s)
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *ProductItemUpdate) SetCreatedAt(t time.Time) *ProductItemUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *ProductItemUpdate) SetNillableCreatedAt(t *time.Time) *ProductItemUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProductItemUpdate) SetUpdatedAt(t time.Time) *ProductItemUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetSubCategoriesID sets the "sub_categories" edge to the SubCategory entity by ID.
func (piu *ProductItemUpdate) SetSubCategoriesID(id uuid.UUID) *ProductItemUpdate {
	piu.mutation.SetSubCategoriesID(id)
	return piu
}

// SetNillableSubCategoriesID sets the "sub_categories" edge to the SubCategory entity by ID if the given value is not nil.
func (piu *ProductItemUpdate) SetNillableSubCategoriesID(id *uuid.UUID) *ProductItemUpdate {
	if id != nil {
		piu = piu.SetSubCategoriesID(*id)
	}
	return piu
}

// SetSubCategories sets the "sub_categories" edge to the SubCategory entity.
func (piu *ProductItemUpdate) SetSubCategories(s *SubCategory) *ProductItemUpdate {
	return piu.SetSubCategoriesID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (piu *ProductItemUpdate) SetUserID(id uuid.UUID) *ProductItemUpdate {
	piu.mutation.SetUserID(id)
	return piu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (piu *ProductItemUpdate) SetNillableUserID(id *uuid.UUID) *ProductItemUpdate {
	if id != nil {
		piu = piu.SetUserID(*id)
	}
	return piu
}

// SetUser sets the "user" edge to the User entity.
func (piu *ProductItemUpdate) SetUser(u *User) *ProductItemUpdate {
	return piu.SetUserID(u.ID)
}

// Mutation returns the ProductItemMutation object of the builder.
func (piu *ProductItemUpdate) Mutation() *ProductItemMutation {
	return piu.mutation
}

// ClearSubCategories clears the "sub_categories" edge to the SubCategory entity.
func (piu *ProductItemUpdate) ClearSubCategories() *ProductItemUpdate {
	piu.mutation.ClearSubCategories()
	return piu
}

// ClearUser clears the "user" edge to the User entity.
func (piu *ProductItemUpdate) ClearUser() *ProductItemUpdate {
	piu.mutation.ClearUser()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductItemUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductItemUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductItemUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductItemUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProductItemUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := productitem.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProductItemUpdate) check() error {
	if v, ok := piu.mutation.Name(); ok {
		if err := productitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductItem.name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Amount(); ok {
		if err := productitem.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "ProductItem.amount": %w`, err)}
		}
	}
	if v, ok := piu.mutation.UnitType(); ok {
		if err := productitem.UnitTypeValidator(v); err != nil {
			return &ValidationError{Name: "unit_type", err: fmt.Errorf(`ent: validator failed for field "ProductItem.unit_type": %w`, err)}
		}
	}
	return nil
}

func (piu *ProductItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productitem.Table, productitem.Columns, sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeUUID))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.SetField(productitem.FieldName, field.TypeString, value)
	}
	if value, ok := piu.mutation.Amount(); ok {
		_spec.SetField(productitem.FieldAmount, field.TypeString, value)
	}
	if value, ok := piu.mutation.UnitType(); ok {
		_spec.SetField(productitem.FieldUnitType, field.TypeString, value)
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.SetField(productitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(productitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.SubCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.SubCategoriesTable,
			Columns: []string{productitem.SubCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.SubCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.SubCategoriesTable,
			Columns: []string{productitem.SubCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.UserTable,
			Columns: []string{productitem.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.UserTable,
			Columns: []string{productitem.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductItemUpdateOne is the builder for updating a single ProductItem entity.
type ProductItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductItemMutation
}

// SetName sets the "name" field.
func (piuo *ProductItemUpdateOne) SetName(s string) *ProductItemUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetAmount sets the "amount" field.
func (piuo *ProductItemUpdateOne) SetAmount(s string) *ProductItemUpdateOne {
	piuo.mutation.SetAmount(s)
	return piuo
}

// SetUnitType sets the "unit_type" field.
func (piuo *ProductItemUpdateOne) SetUnitType(s string) *ProductItemUpdateOne {
	piuo.mutation.SetUnitType(s)
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *ProductItemUpdateOne) SetCreatedAt(t time.Time) *ProductItemUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *ProductItemUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductItemUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProductItemUpdateOne) SetUpdatedAt(t time.Time) *ProductItemUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetSubCategoriesID sets the "sub_categories" edge to the SubCategory entity by ID.
func (piuo *ProductItemUpdateOne) SetSubCategoriesID(id uuid.UUID) *ProductItemUpdateOne {
	piuo.mutation.SetSubCategoriesID(id)
	return piuo
}

// SetNillableSubCategoriesID sets the "sub_categories" edge to the SubCategory entity by ID if the given value is not nil.
func (piuo *ProductItemUpdateOne) SetNillableSubCategoriesID(id *uuid.UUID) *ProductItemUpdateOne {
	if id != nil {
		piuo = piuo.SetSubCategoriesID(*id)
	}
	return piuo
}

// SetSubCategories sets the "sub_categories" edge to the SubCategory entity.
func (piuo *ProductItemUpdateOne) SetSubCategories(s *SubCategory) *ProductItemUpdateOne {
	return piuo.SetSubCategoriesID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (piuo *ProductItemUpdateOne) SetUserID(id uuid.UUID) *ProductItemUpdateOne {
	piuo.mutation.SetUserID(id)
	return piuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (piuo *ProductItemUpdateOne) SetNillableUserID(id *uuid.UUID) *ProductItemUpdateOne {
	if id != nil {
		piuo = piuo.SetUserID(*id)
	}
	return piuo
}

// SetUser sets the "user" edge to the User entity.
func (piuo *ProductItemUpdateOne) SetUser(u *User) *ProductItemUpdateOne {
	return piuo.SetUserID(u.ID)
}

// Mutation returns the ProductItemMutation object of the builder.
func (piuo *ProductItemUpdateOne) Mutation() *ProductItemMutation {
	return piuo.mutation
}

// ClearSubCategories clears the "sub_categories" edge to the SubCategory entity.
func (piuo *ProductItemUpdateOne) ClearSubCategories() *ProductItemUpdateOne {
	piuo.mutation.ClearSubCategories()
	return piuo
}

// ClearUser clears the "user" edge to the User entity.
func (piuo *ProductItemUpdateOne) ClearUser() *ProductItemUpdateOne {
	piuo.mutation.ClearUser()
	return piuo
}

// Where appends a list predicates to the ProductItemUpdate builder.
func (piuo *ProductItemUpdateOne) Where(ps ...predicate.ProductItem) *ProductItemUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductItemUpdateOne) Select(field string, fields ...string) *ProductItemUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductItem entity.
func (piuo *ProductItemUpdateOne) Save(ctx context.Context) (*ProductItem, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductItemUpdateOne) SaveX(ctx context.Context) *ProductItem {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductItemUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductItemUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProductItemUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := productitem.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProductItemUpdateOne) check() error {
	if v, ok := piuo.mutation.Name(); ok {
		if err := productitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductItem.name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Amount(); ok {
		if err := productitem.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "ProductItem.amount": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.UnitType(); ok {
		if err := productitem.UnitTypeValidator(v); err != nil {
			return &ValidationError{Name: "unit_type", err: fmt.Errorf(`ent: validator failed for field "ProductItem.unit_type": %w`, err)}
		}
	}
	return nil
}

func (piuo *ProductItemUpdateOne) sqlSave(ctx context.Context) (_node *ProductItem, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productitem.Table, productitem.Columns, sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeUUID))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productitem.FieldID)
		for _, f := range fields {
			if !productitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.SetField(productitem.FieldName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Amount(); ok {
		_spec.SetField(productitem.FieldAmount, field.TypeString, value)
	}
	if value, ok := piuo.mutation.UnitType(); ok {
		_spec.SetField(productitem.FieldUnitType, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.SetField(productitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.SubCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.SubCategoriesTable,
			Columns: []string{productitem.SubCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.SubCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.SubCategoriesTable,
			Columns: []string{productitem.SubCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.UserTable,
			Columns: []string{productitem.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productitem.UserTable,
			Columns: []string{productitem.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductItem{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
