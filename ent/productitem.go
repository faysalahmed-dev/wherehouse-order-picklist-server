// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/order"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/productitem"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/subcategory"
	"github.com/faysalahmed-dev/wherehouse-order-picklist/ent/user"
	"github.com/google/uuid"
)

// ProductItem is the model entity for the ProductItem schema.
type ProductItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductItemQuery when eager-loading is set.
	Edges                      ProductItemEdges `json:"edges"`
	order_product              *uuid.UUID
	sub_category_product_items *uuid.UUID
	user_product_items         *uuid.UUID
	selectValues               sql.SelectValues
}

// ProductItemEdges holds the relations/edges for other nodes in the graph.
type ProductItemEdges struct {
	// SubCategories holds the value of the sub_categories edge.
	SubCategories *SubCategory `json:"sub_categories,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SubCategoriesOrErr returns the SubCategories value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductItemEdges) SubCategoriesOrErr() (*SubCategory, error) {
	if e.loadedTypes[0] {
		if e.SubCategories == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subcategory.Label}
		}
		return e.SubCategories, nil
	}
	return nil, &NotLoadedError{edge: "sub_categories"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductItemEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[1] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductItemEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productitem.FieldName:
			values[i] = new(sql.NullString)
		case productitem.FieldCreatedAt, productitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case productitem.FieldID:
			values[i] = new(uuid.UUID)
		case productitem.ForeignKeys[0]: // order_product
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case productitem.ForeignKeys[1]: // sub_category_product_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case productitem.ForeignKeys[2]: // user_product_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductItem fields.
func (pi *ProductItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pi.ID = *value
			}
		case productitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pi.Name = value.String
			}
		case productitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case productitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case productitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_product", values[i])
			} else if value.Valid {
				pi.order_product = new(uuid.UUID)
				*pi.order_product = *value.S.(*uuid.UUID)
			}
		case productitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sub_category_product_items", values[i])
			} else if value.Valid {
				pi.sub_category_product_items = new(uuid.UUID)
				*pi.sub_category_product_items = *value.S.(*uuid.UUID)
			}
		case productitem.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_product_items", values[i])
			} else if value.Valid {
				pi.user_product_items = new(uuid.UUID)
				*pi.user_product_items = *value.S.(*uuid.UUID)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductItem.
// This includes values selected through modifiers, order, etc.
func (pi *ProductItem) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QuerySubCategories queries the "sub_categories" edge of the ProductItem entity.
func (pi *ProductItem) QuerySubCategories() *SubCategoryQuery {
	return NewProductItemClient(pi.config).QuerySubCategories(pi)
}

// QueryOrder queries the "order" edge of the ProductItem entity.
func (pi *ProductItem) QueryOrder() *OrderQuery {
	return NewProductItemClient(pi.config).QueryOrder(pi)
}

// QueryUser queries the "user" edge of the ProductItem entity.
func (pi *ProductItem) QueryUser() *UserQuery {
	return NewProductItemClient(pi.config).QueryUser(pi)
}

// Update returns a builder for updating this ProductItem.
// Note that you need to call ProductItem.Unwrap() before calling this method if this ProductItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProductItem) Update() *ProductItemUpdateOne {
	return NewProductItemClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProductItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProductItem) Unwrap() *ProductItem {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductItem is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProductItem) String() string {
	var builder strings.Builder
	builder.WriteString("ProductItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("name=")
	builder.WriteString(pi.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductItems is a parsable slice of ProductItem.
type ProductItems []*ProductItem
